//verstual gamepad activating

//Enable i2c
//in terminal : "sudo raspi-config"
//go to interface options-> i2c-> yes
//reboot

//sudo apt update
//sudo apt install -y python3-pip python3-smbus python3-uinput i2c-tools git
//cd ~
//git clone https://github.com/adafruit/Adafruit_Python_ADS1x15.git
//cd Adafruit_Python_ADS1x15
//sudo python3 setup.py install
//sudo apt install python3-rpi.gpio
//sudo pip3 install RPi.GPIO
//sudo pip3 install adafruit-circuitpython-busdevice==5.0.0
//if not work with it
//in terminal: "i2cdetect -y 1"
//it will show the no. "48" in a table like a calender
//     0 1 2 3 4 5 6 7 8 9 a b c d e f
//00:          -- -- -- -- -- -- -- --
//10: -- -- -- -- -- -- -- -- -- -- -- --
//20: -- -- -- -- -- -- -- -- -- -- -- --
//30: -- -- -- -- -- -- -- -- -- -- -- --
//40: 48 -- -- -- -- -- -- -- -- -- -- --
//50: -- -- -- -- -- -- -- -- -- -- -- --
//60: -- -- -- -- -- -- -- -- -- -- -- --
//70: -- -- -- -- -- -- -- --
//The 48 means your ADS1115 is detected at address 0x48

//nano ~/retro_gamepad.py
//This opens the nano editor and creates a file called retro_gamepad.py in your home directory
//Save the file

//Press Ctrl + X to exit.

//Press Y to confirm saving.

//Press Enter to save with the same filename (retro_gamepad.py).

//sudo python3 -c "import RPi.GPIO as GPIO; GPIO.cleanup()"
//sudo python3 ~/retro_gamepad.py

//the terminal will stop so use another ssh terminal like "putty"  

//ls /dev/input/
//show: by-id by-path event0 event1 event2 event3 js0 mice
//sudo apt install joystick
//jstest /dev/input/js0

//Create a service file:
//sudo nano /etc/systemd/system/retro_gamepad.service

//Save & enable service
//Press CTRL+O, Enter, then CTRL+X to exit.

//sudo systemctl daemon-reload
//sudo systemctl enable retro_gamepad.service
//sudo systemctl start retro_gamepad.service

//Check if it’s running:
//sudo systemctl status retro_gamepad.service


//code for retro_gamepad.py
''''
# retro_gamepad_legacy.py
import time
import Adafruit_ADS1x15  # Legacy ADS1x15 library
import RPi.GPIO as GPIO
import uinput
import logging

# Setup logging
logging.basicConfig(filename="/home/pi/retro_gamepad.log", level=logging.INFO, format="%(asctime)s - %(message)s")

# Buttons mapping
buttons = {
    17: uinput.BTN_DPAD_UP,
    27: uinput.BTN_DPAD_DOWN,
    22: uinput.BTN_DPAD_LEFT,
    23: uinput.BTN_DPAD_RIGHT,
    24: uinput.BTN_A,
    25: uinput.BTN_B,
    5:  uinput.BTN_X,
    6:  uinput.BTN_Y,
    12: uinput.BTN_START,
    13: uinput.BTN_SELECT,
    19: uinput.BTN_TL,
    26: uinput.BTN_TR
}

GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
for pin in buttons:
    GPIO.setup(pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)

# Joystick setup using legacy library
adc = Adafruit_ADS1x15.ADS1115()

def scale_axis(val):
    return int((val + 32768) >> 1)  # -32768..32767 → 0..32767


device = uinput.Device([
    uinput.ABS_X + (0, 32767, 0, 0),
    uinput.ABS_Y + (0, 32767, 0, 0),
    uinput.ABS_RX + (0, 32767, 0, 0),
    uinput.ABS_RY + (0, 32767, 0, 0),
] + list(buttons.values()))


time.sleep(1)

last_state = {pin: True for pin in buttons}

try:
    while True:
        # --- Buttons ---
        for pin, btn in buttons.items():
            pressed = GPIO.input(pin) == GPIO.LOW
            if pressed != last_state[pin]:
                device.emit(btn, int(pressed))
                last_state[pin] = pressed
                logging.info(f"Button {btn} {'pressed' if pressed else 'released'}")

        # --- Joysticks ---
        x = scale_axis(adc.read_adc(0, gain=1))
        y = scale_axis(adc.read_adc(1, gain=1))
        rx = scale_axis(adc.read_adc(2, gain=1))
        ry = scale_axis(adc.read_adc(3, gain=1))

        device.emit(uinput.ABS_X, x)
        device.emit(uinput.ABS_Y, y)
        device.emit(uinput.ABS_RX, rx)
        device.emit(uinput.ABS_RY, ry)

        logging.info(f"Joystick X:{x} Y:{y} RX:{rx} RY:{ry}")

        # Short delay to avoid high CPU usage
        time.sleep(0.01)

except KeyboardInterrupt:
    GPIO.cleanup()
    print("Exiting...")
''''





//code for retro_gamepad.service
''''
[Unit]
Description=Retro Gamepad Service
After=network.target

[Service]
ExecStart=/usr/bin/python3 /home/pi/retro_gamepad_legacy.py
WorkingDirectory=/home/pi
StandardOutput=journal
StandardError=journal
Restart=always
User=root
Group=root

[Install]
WantedBy=multi-user.target
'''''
